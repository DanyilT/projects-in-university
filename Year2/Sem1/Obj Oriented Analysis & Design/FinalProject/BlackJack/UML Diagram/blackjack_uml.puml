@startuml

class Main {
    + static void main(String[] args)
}

package cards {
    class Card {
        - CardRank rank
        - CardSuit suit
        + Card(CardRank rank, CardSuit suit)
        + String getCard()
        + CardRank getRank()
        + CardSuit getSuit()
    }

    class Deck {
        - static DeckDataHandler deckDataHandler
        - static LinkedHashMap<String, Card> deck
        + Deck()
        + LinkedHashMap<String, Card> getDeck()
        - void generateDeck()
        - void shuffleDeck()
        + void clearDeck()
        + String drawCard()
    }

    enum CardRank {
        // Enum values
        Object value
        CardRank(Object value)
        Object getValue()
    }

    enum CardSuit {
        // Enum values
        char symbol
        CardSuit(char symbol)
        char getSymbol()
    }
}

package data {
    abstract class DataHandler {
        - Yaml yaml
        # DataHandler()
        # Map<String, Object> readData(String file)
        # void writeData(String file, Map<String, Object> data)
        # abstract void updateData(String file, String key, Object value)
    }

    class DeckDataHandler extends DataHandler {
        + static String deckDataFilePath
        + Map<String, Object> readDeck(String file)
        + void writeDeck(String file, Map<String, Card> deck)
        # void updateDeck(String file, String key, Object value)
    }

    class GameDataHandler extends DataHandler {
        + static String gameDataFilePath
        + Map<String, Object> readGameData(String file)
        + Map<String, Object> readSettingsData(String file)
        + void updateSettingsData(String file, String key, Object value)
        + Map<String, Object> readPlayerGameData(String file, Integer playerId)
        + void updatePlayerGameData(String file, Integer playerId, String key, Object value)
        + void addPlayerGameData(String file, Player player)
        + void removePlayerGameData(String file, Integer playerId)
        # void updateData(String file, String key, Object value)
    }
}

package exceptions {
    class InsufficientChipsException extends Exception {
        + InsufficientChipsException(String message)
    }
    class InvalidPlayerDataException extends Exception {
        + InvalidPlayerDataException(String message)
    }
}

package game {
    class BlackjackGame {
        - static GameDataHandler gameDataHandler
        - final Map<Integer, Player> players
        + BlackjackGame() throws InvalidPlayerDataException
    }

    class GameEngine {
        - static final Scanner scanner
        - static final GameDataHandler gameDataHandler
        + static void actionLoop(Map<Integer, Player> players)
        - static boolean actionManager(UserPlayer player, int handIndex)
        - static Map<UserPlayer, Map<Integer, String>> determineWinners(Map<Integer, Player> players)
    }

    class TableDrawer {
        - final String filePath
        - final int[] turnIndicator
        + TableDrawer(int[] turnIndicator)
        + void drawTable()
        - void printTable(Map<Integer, Object> data)
    }
}

package players {
    abstract class Player {
        - final String name
        - Integer chips
        - LinkedHashMap<Integer, Integer> bets
        - LinkedHashMap<Integer, List<String>> hands
        - LinkedHashMap<Integer, Integer> countValues
        + Player(String name, Integer chips, LinkedHashMap<Integer, Integer> bets, LinkedHashMap<Integer, List<String>> hands, LinkedHashMap<Integer, Integer> countValues)
        + String getName()
        + Integer getChips()
        + void setChips(Integer chips)
        + LinkedHashMap<Integer, Integer> getBets()
        + void setBets(LinkedHashMap<Integer, Integer> bets)
        + LinkedHashMap<Integer, List<String>> getHands()
        + LinkedHashMap<Integer, Integer> getCountValues()
        + String toString()
        # void savePlayerToFile(String file, Player player)
        # void removePlayerFromYaml(String file, Integer playerId)
        # Integer countHandValue(List<String> hand)
        # abstract List<String> dealInitialHand()
        # abstract void hit(int handIndex)
        # abstract void stand(int handIndex)
        # abstract void doubleDown(int handIndex) throws InsufficientChipsException
        # abstract void split(int handIndex)
        # abstract void updateYaml(String file, Integer playerId, String key, Object value)
    }

    class Dealer extends Player implements PlayerActions {
        - static final GameDataHandler gameDataHandler
        - static Deck deck
        - final int dealerId
        + Dealer(Deck deck)
        + void dealerActions()
        # void dealInitialHand()
        + void hit(int handIndex)
        + void stand(int handIndex)
        + void doubleDown(int handIndex)
        + void split(int handIndex)
        # void updateYaml(String file, Integer playerId, String key, Object value)
    }

    class UserPlayer extends Player implements PlayerActions {
        - static final GameDataHandler gameDataHandler
        - static final Map<String, Object> settings
        - static Deck deck
        - final int playerId
        + UserPlayer(String name, Deck deck)
        + int getPlayerId()
        + List<String> getPossibleActions(int handIndex)
        # List<String> dealInitialHand()
        + void hit(int handIndex)
        + void stand(int handIndex)
        + void doubleDown(int handIndex) throws InsufficientChipsException
        + void split(int handIndex)
        # void updateYaml(String file, Integer playerId, String key, Object value)
    }

    interface PlayerActions {
        + void hit(int handIndex)
        + void stand(int handIndex)
        + void doubleDown(int handIndex) throws InsufficientChipsException
        + void split(int handIndex)
    }
}

cards.Deck -- cards.Card
cards.Deck -- data.DeckDataHandler
data.DeckDataHandler -- cards.Card
data.GameDataHandler -- players.Player
game.BlackjackGame -- cards.Deck
game.BlackjackGame -- data.GameDataHandler
game.BlackjackGame -- exceptions.InvalidPlayerDataException
game.BlackjackGame -- players.Dealer
game.BlackjackGame -- players.Player
game.BlackjackGame -- players.UserPlayer
game.GameEngine -- data.GameDataHandler
game.GameEngine -- exceptions.InsufficientChipsException
game.GameEngine -- players.Dealer
game.GameEngine -- players.Player
game.GameEngine -- players.UserPlayer
game.TableDrawer -- data.GameDataHandler
Main -- game.BlackjackGame

@enduml
